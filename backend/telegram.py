import asyncio
import logging
from minio import Minio
from minio.error import S3Error
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.filters import Command, StateFilter
from config import Settings
from service import (
    get_feedbacks,
    create_feedback,
    delete_feedback,
    get_video_feedbacks,
    create_video_feedback,
    delete_video_feedback,
    get_video_feedback_by_uuid,
)
from schemas import FeedbackCreate, VideoFeedbackCreate
import io
import uuid as uuid_lib

settings = Settings()
logger = logging.getLogger(__name__)

# --- FSM ---
class FeedbackStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_rate = State()

# --- FSM (video) ---
class VideoStates(StatesGroup):
    waiting_for_file = State()

# --- MinIO ---
minio_client = Minio(
    settings.MINIO_ENDPOINT,
    access_key=settings.MINIO_ACCESS_KEY,
    secret_key=settings.MINIO_SECRET_KEY,
    secure=settings.MINIO_SECURE,
)

# --- Bot/Dispatcher ---
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# --- Helpers ---

def is_admin(user_id: int) -> bool:
    return user_id in settings.admin_ids_list

async def init_minio():
    try:
        if not minio_client.bucket_exists(settings.MINIO_BUCKET_NAME):
            minio_client.make_bucket(settings.MINIO_BUCKET_NAME)
            logger.info("MinIO bucket '%s' —Å–æ–∑–¥–∞–Ω", settings.MINIO_BUCKET_NAME)
        else:
            logger.info("MinIO bucket '%s' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", settings.MINIO_BUCKET_NAME)
    except S3Error as e:
        logger.error("–û—à–∏–±–∫–∞ MinIO: %s", e)

def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìπ –í–∏–¥–µ–æ-–æ—Ç–∑—ã–≤—ã", callback_data="video_reviews")],
        [InlineKeyboardButton(text="‚≠ê –û—Ç–∑—ã–≤—ã", callback_data="text_reviews")],
    ])

def get_actions_keyboard(category: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"view_{category}")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_{category}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{category}")],
        [InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="main_menu")],
    ])

def get_rate_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=str(i), callback_data=f"rate_{i}")
            for i in (0, 1, 2)
        ],
        [
            InlineKeyboardButton(text=str(i), callback_data=f"rate_{i}")
            for i in (3, 4, 5)
        ],
    ])

def get_delete_feedbacks_keyboard(feedbacks) -> InlineKeyboardMarkup:
    buttons = []
    for i in range(0, len(feedbacks), 3):
        row = []
        for j in range(3):
            if i + j < len(feedbacks):
                fb = feedbacks[i + j]
                row.append(
                    InlineKeyboardButton(
                        text=str(fb.id),
                        callback_data=f"delete_feedback_{fb.id}",
                    )
                )
        if row:
            buttons.append(row)
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="text_reviews")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def send_long_text(message_or_callback, text: str, **kwargs):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ 4096).
    message_or_callback: Message –∏–ª–∏ CallbackQuery
    """
    MAX = 4096
    chunks = [text[i:i+MAX] for i in range(0, len(text), MAX)] or [""]
    # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ callback –∏ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –∫—É—Å–æ–∫,
    # –æ—Å—Ç–∞–ª—å–Ω–æ–µ –¥–æ—Å—ã–ª–∞–µ–º –∫–∞–∫ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if isinstance(message_or_callback, CallbackQuery):
        cb = message_or_callback
        try:
            await cb.message.edit_text(chunks[0], **kwargs)
        except Exception:
            await cb.message.answer(chunks[0], **kwargs)
        for chunk in chunks[1:]:
            await cb.message.answer(chunk)
    else:
        msg = message_or_callback
        for i, chunk in enumerate(chunks):
            if i == 0:
                await msg.answer(chunk, **kwargs)
            else:
                await msg.answer(chunk)

# --- Handlers ---

@dp.message(Command("start"))
async def start_handler(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    welcome = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
    await message.answer(welcome, reply_markup=get_main_menu_keyboard())

@dp.callback_query(F.data == "main_menu")
async def main_menu_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    welcome = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
    try:
        await callback.message.edit_text(welcome, reply_markup=get_main_menu_keyboard())
    finally:
        await callback.answer()

@dp.callback_query(F.data == "video_reviews")
async def video_reviews_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    text = "üìπ <b>–í–∏–¥–µ–æ-–æ—Ç–∑—ã–≤—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await callback.message.edit_text(text, reply_markup=get_actions_keyboard("video"))
    await callback.answer()

@dp.callback_query(F.data == "text_reviews")
async def text_reviews_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    text = "‚≠ê <b>–û—Ç–∑—ã–≤—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await callback.message.edit_text(text, reply_markup=get_actions_keyboard("text"))
    await callback.answer()

@dp.callback_query(F.data.startswith("view_"))
async def view_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    category = callback.data.split("_", 1)[1]
    if category == "video":
        videos = await get_video_feedbacks()
        if not videos:
            text = "üìπ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ-–æ—Ç–∑—ã–≤–æ–≤</b>\n\n–í–∏–¥–µ–æ-–æ—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
            await callback.message.edit_text(text, reply_markup=get_actions_keyboard(category))
        else:
            header = "üìπ <b>–í–∏–¥–µ–æ-–æ—Ç–∑—ã–≤—ã</b>\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥–µ–æ..."
            try:
                await callback.message.edit_text(header, reply_markup=get_actions_keyboard(category))
            except Exception:
                await callback.message.answer(header, reply_markup=get_actions_keyboard(category))
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—á–µ—Ä–µ–∑ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ MinIO)
            for v in videos:
                try:
                    obj = minio_client.get_object(settings.MINIO_BUCKET_NAME, v.file)
                    data = obj.read()
                    obj.close()
                    obj.release_conn()
                    tg_file = BufferedInputFile(data, filename=f"{v.uuid}.mp4")
                    await callback.message.answer_video(video=tg_file, caption=v.uuid)
                except Exception:
                    await callback.message.answer(f"{v.uuid}: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ")
    else:
        feedbacks = await get_feedbacks()
        if not feedbacks:
            text = "‚≠ê <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤</b>\n\n–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
            await callback.message.edit_text(text, reply_markup=get_actions_keyboard(category))
        else:
            header = "‚≠ê <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤</b>\n\n"
            body = "\n".join(f"{fb.id}) {fb.text}" for fb in feedbacks)
            await send_long_text(
                callback,
                header + body,
                reply_markup=get_actions_keyboard(category),
            )
    await callback.answer()

@dp.callback_query(F.data.startswith("add_"))
async def add_handler(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    category = callback.data.split("_", 1)[1]
    if category == "video":
        text = "üìπ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ-–æ—Ç–∑—ã–≤–∞</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-—Ñ–∞–π–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
        await callback.message.edit_text(text)
        await state.set_state(VideoStates.waiting_for_file)
    else:
        text = "‚≠ê <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:"
        await callback.message.edit_text(text)
        await state.set_state(FeedbackStates.waiting_for_text)
    await callback.answer()

@dp.callback_query(F.data.in_({"delete_text", "delete_video"}))
async def delete_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    category = callback.data.split("_", 1)[1]  # "text" | "video"
    if category == "video":
        videos = await get_video_feedbacks()
        if not videos:
            text = "üìπ <b>–£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ-–æ—Ç–∑—ã–≤–∞</b>\n\n–í–∏–¥–µ–æ-–æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç."
            await callback.message.edit_text(text, reply_markup=get_actions_keyboard(category))
        else:
            text = "üìπ <b>–£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ-–æ—Ç–∑—ã–≤–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ (–ø–æ UUID), –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:"
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text=v.uuid, callback_data=f"delete_video_{v.uuid}")
                        for v in videos[i:i+2]
                    ]
                    for i in range(0, len(videos), 2)
                ]
            )
            kb.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="video_reviews")])
            try:
                await callback.message.edit_text(text, reply_markup=kb)
            except Exception:
                await callback.message.answer(text, reply_markup=kb)
    else:
        feedbacks = await get_feedbacks()
        if not feedbacks:
            text = "‚≠ê <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞</b>\n\n–û—Ç–∑—ã–≤–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç."
            await callback.message.edit_text(text, reply_markup=get_actions_keyboard(category))
        else:
            text = "‚≠ê <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:"
            try:
                await callback.message.edit_text(text, reply_markup=get_delete_feedbacks_keyboard(feedbacks))
            except Exception:
                await callback.message.answer(text, reply_markup=get_delete_feedbacks_keyboard(feedbacks))

    await callback.answer()

# --- –í–í–û–î –¢–ï–ö–°–¢–ê –û–¢–ó–´–í–ê (stateful) ---
@dp.message(StateFilter(FeedbackStates.waiting_for_text))
async def process_feedback_text(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    await state.update_data(text=message.text)
    text = "‚≠ê <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:"
    await message.answer(text, reply_markup=get_rate_keyboard())
    await state.set_state(FeedbackStates.waiting_for_rate)

# --- –í–í–û–î –í–ò–î–ï–û (stateful) ---
@dp.message(StateFilter(VideoStates.waiting_for_file), F.video)
async def process_video_upload(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram –≤ –ø–∞–º—è—Ç—å
        buf = io.BytesIO()
        await message.bot.download(message.video, destination=buf)
        buf.seek(0)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –∏ –∫–ª–∞–¥—ë–º –≤ MinIO
        uid = str(uuid_lib.uuid4())
        object_name = f"videos/{uid}.mp4"
        minio_client.put_object(
            settings.MINIO_BUCKET_NAME,
            object_name,
            buf,
            length=len(buf.getbuffer()),
            content_type="video/mp4",
        )

        # –ü–∏—à–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é rate=0)
        await create_video_feedback(VideoFeedbackCreate(file=object_name, rate=0))

        await state.clear()
        await message.answer("‚úÖ –í–∏–¥–µ–æ-–æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=get_actions_keyboard("video"))
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: %s", e)
        await state.clear()
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=get_actions_keyboard("video"))

@dp.callback_query(StateFilter(FeedbackStates.waiting_for_rate), F.data.startswith("rate_"))
async def process_feedback_rate(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    try:
        rate = int(callback.data.split("_", 1)[1])
        data = await state.get_data()
        feedback_data = FeedbackCreate(text=data["text"], rate=rate)
        await create_feedback(feedback_data)
        await state.clear()

        text = "‚≠ê <b>–û—Ç–∑—ã–≤—ã</b>\n\n‚úÖ –û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        try:
            await callback.message.edit_text(text, reply_markup=get_actions_keyboard("text"))
        except Exception:
            await callback.message.answer(text, reply_markup=get_actions_keyboard("text"))
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: %s", e)
        await state.clear()
        text = "‚≠ê <b>–û—Ç–∑—ã–≤—ã</b>\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        try:
            await callback.message.edit_text(text, reply_markup=get_actions_keyboard("text"))
        except Exception:
            await callback.message.answer(text, reply_markup=get_actions_keyboard("text"))
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_feedback_"))
async def delete_feedback_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    try:
        feedback_id = int(callback.data.split("_")[2])
        success = await delete_feedback(feedback_id)

        if success:
            text = "‚≠ê <b>–û—Ç–∑—ã–≤—ã</b>\n\n‚úÖ –û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        else:
            text = "‚≠ê <b>–û—Ç–∑—ã–≤—ã</b>\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        try:
            await callback.message.edit_text(text, reply_markup=get_actions_keyboard("text"))
        except Exception:
            await callback.message.answer(text, reply_markup=get_actions_keyboard("text"))
            
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: %s", e)
        text = "‚≠ê <b>–û—Ç–∑—ã–≤—ã</b>\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        try:
            await callback.message.edit_text(text, reply_markup=get_actions_keyboard("text"))
        except Exception:
            await callback.message.answer(text, reply_markup=get_actions_keyboard("text"))

    await callback.answer()

@dp.callback_query(F.data.startswith("delete_video_"))
async def delete_video_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    try:
        uuid_val = callback.data.split("_", 2)[2]
        video = await get_video_feedback_by_uuid(uuid_val)
        if not video:
            text = "üìπ <b>–í–∏–¥–µ–æ-–æ—Ç–∑—ã–≤—ã</b>\n\n‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        else:
            # –£–¥–∞–ª—è–µ–º –∏–∑ MinIO, –∑–∞—Ç–µ–º –∏–∑ –ë–î
            try:
                minio_client.remove_object(settings.MINIO_BUCKET_NAME, video.file)
            except Exception:
                pass
            success = await delete_video_feedback(uuid_val)
            text = (
                "üìπ <b>–í–∏–¥–µ–æ-–æ—Ç–∑—ã–≤—ã</b>\n\n‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!"
                if success else
                "üìπ <b>–í–∏–¥–µ–æ-–æ—Ç–∑—ã–≤—ã</b>\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ."
            )
        try:
            await callback.message.edit_text(text, reply_markup=get_actions_keyboard("video"))
        except Exception:
            await callback.message.answer(text, reply_markup=get_actions_keyboard("video"))
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: %s", e)
        try:
            await callback.message.edit_text("üìπ <b>–í–∏–¥–µ–æ-–æ—Ç–∑—ã–≤—ã</b>\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.", reply_markup=get_actions_keyboard("video"))
        except Exception:
            await callback.message.answer("üìπ <b>–í–∏–¥–µ–æ-–æ—Ç–∑—ã–≤—ã</b>\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.", reply_markup=get_actions_keyboard("video"))
    await callback.answer()

# --- –§–æ–ª–±—ç–∫ ---
@dp.message()
async def message_handler(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é.")

# --- Start/Task ---

async def start_bot():
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MinIO...")
        await init_minio()
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: %s", e)

def start_bot_task():
    asyncio.create_task(start_bot())
